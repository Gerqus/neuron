"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const xor_1 = require("./networks/xor");
const lab_1 = require("./libs/lab");
const Network_class_1 = require("./classes/Network.class");
const epochs = 300;
const times = 100;
const XORNetwork = new Network_class_1.Network(xor_1.XORNetworkSchema);
XORNetwork.setTrainingCases(xor_1.XORTrainDataset);
lab_1.showTrainingResults(XORNetwork);
const untrainedXor = XORNetwork.saveNetworkToSchema();
console.log('\n');
const PlotterInst = new lab_1.Plotter();
const outputNeuronInput = PlotterInst.addSerie([40, 200, 10], 'last neuron input');
const outputBias = PlotterInst.addSerie([200, 40, 10], 'bias');
const output = PlotterInst.addSerie([20, 210, 100], 'output');
const outputDelta = PlotterInst.addSerie([190, 30, 110], 'delta');
const outputDerrivative = PlotterInst.addSerie([40, 10, 200], 'derrivative');
const errorPlot = PlotterInst.addSerie([180, 10, 30], 'error');
const testToLogFor = 3;
console.log('\n');
const log1 = XORNetwork.getNetworkStatus(xor_1.XORTrainDataset[testToLogFor]);
output.addPoint(log1.output[0]);
outputDelta.addPoint(log1.layers[log1.layers.length - 1].neurons[0].delta);
outputBias.addPoint(log1.layers[log1.layers.length - 1].neurons[0].bias);
outputDerrivative.addPoint(log1.layers[log1.layers.length - 1].neurons[0].activationDerivativeCalculation);
outputNeuronInput.addPoint(log1.layers[log1.layers.length - 1].neurons[0].inputsWeightedSum);
errorPlot.addPoint(log1.generalError);
for (let i = 0; i < times; ++i) {
    XORNetwork.train(epochs, (net) => lab_1.getMeanNetworkError(net, xor_1.XORTrainDataset) < 0.001);
    const log = XORNetwork.getNetworkStatus(xor_1.XORTrainDataset[testToLogFor]);
    output.addPoint(log.output[0]);
    outputDelta.addPoint(log.layers[log.layers.length - 1].neurons[0].delta);
    outputBias.addPoint(log.layers[log.layers.length - 1].neurons[0].bias);
    outputDerrivative.addPoint(log.layers[log.layers.length - 1].neurons[0].activationDerivativeCalculation);
    outputNeuronInput.addPoint(log.layers[log.layers.length - 1].neurons[0].inputsWeightedSum);
    errorPlot.addPoint(log.generalError);
}
lab_1.showTrainingResults(XORNetwork);
PlotterInst.draw();
lab_1.showTrainingResults(XORNetwork);
console.log('\n=============================================\n');
//# sourceMappingURL=main.js.map